shell:
  program: /bin/sh
  args:
    - --login
    - -c
    - "tmux attach-session -t $USER || tmux new-session -s $USER"

window:
  dimensions:
    columns: 0
    lines: 0
  padding:
    x: 5
    y: 5
  decorations: full
  opacity: 0.9

scrolling:
  history: 100000

mouse:
  hide_when_typing: false
  hints:
    # Default:
    #   - (macOS) open
    #   - (Linux/BSD) xdg-open
    #   - (Windows) explorer
    launcher:
      program: open
      args: []
    modifiers: Command

font:
  # Normal (roman) font face
  normal:
    family: Hack Nerd Font
  bold:
    family: Hack Nerd Font
    style: Bold
  italic:
    family: Hack Nerd Font
    style: Italic
  bold_italic:
    family: Hack Nerd Font
    style: Bold Italic
  size: 15.0
  offset:
    x: 0
    y: 0

draw_bold_text_with_bright_colors: false

# Copyright (c) 2017-present Arctic Ice Studio <development@arcticicestudio.com>
# Copyright (c) 2017-present Sven Greb <code@svengreb.de>

# Project:    Nord Alacritty
# Version:    0.1.0
# Repository: https://github.com/arcticicestudio/nord-alacritty
# License:    MIT
# References:
#   https://github.com/alacritty/alacritty

colors:
  primary:
    background: "#2e3440"
    foreground: "#d8dee9"
    dim_foreground: "#a5abb6"
  cursor:
    text: "#2e3440"
    cursor: "#d8dee9"
  vi_mode_cursor:
    text: "#2e3440"
    cursor: "#d8dee9"
  selection:
    text: CellForeground
    background: "#4c566a"
  search:
    matches:
      foreground: CellBackground
      background: "#88c0d0"
  footer_bar:
    background: "#434c5e"
    foreground: "#d8dee9"
  normal:
    black: "#3b4252"
    red: "#bf616a"
    green: "#a3be8c"
    yellow: "#ebcb8b"
    blue: "#81a1c1"
    magenta: "#b48ead"
    cyan: "#88c0d0"
    white: "#e5e9f0"
  bright:
    black: "#4c566a"
    red: "#bf616a"
    green: "#a3be8c"
    yellow: "#ebcb8b"
    blue: "#81a1c1"
    magenta: "#b48ead"
    cyan: "#8fbcbb"
    white: "#eceff4"
  dim:
    black: "#373e4d"
    red: "#94545d"
    green: "#809575"
    yellow: "#b29e75"
    blue: "#68809a"
    magenta: "#8c738c"
    cyan: "#6d96a5"
    white: "#aeb3bb"

#colors:
#  # Default colors
#  primary:
#    background: "0x021644"
#    foreground: "0xedf2fa"
#
#  # Normal colors
#  normal:
#    black: "0x5b7180"
#    red: "0xb22222"
#    green: "0x05a666"
#    yellow: "0xf9a826"
#    blue: "0x02382f"
#    magenta: "0x3d7dd2"
#    cyan: "0x006554"
#    white: "0x5b7180"
#
#  # Bright colors
#  bright:
#    black: "0x9db2c4"
#    red: "0xbf4246"
#    green: "0x2aff93"
#    yellow: "0xf9d966"
#    blue: "0x1aa58e"
#    magenta: "0x9db2c4"
#    cyan: "0x00d682"
#    white: "0xcfdce8"
# Bell
#
# The bell is rung every time the BEL control character is received.
#bell:
# Visual Bell Animation
#
# Animation effect for flashing the screen when the visual bell is rung.
#
# Values for `animation`:
#   - Ease
#   - EaseOut
#   - EaseOutSine
#   - EaseOutQuad
#   - EaseOutCubic
#   - EaseOutQuart
#   - EaseOutQuint
#   - EaseOutExpo
#   - EaseOutCirc
#   - Linear
#animation: EaseOutExpo

# Duration of the visual bell flash in milliseconds. A `duration` of `0` will
# disable the visual bell animation.
#duration: 0

# Visual bell animation color.
#color: '#ffffff'

# Bell Command
#
# This program is executed whenever the bell is rung.
#
# When set to `command: None`, no command will be executed.
#
# Example:
#   command:
#     program: notify-send
#     args: ["Hello, World!"]
#
#command: None

#selection:
# This string contains all characters that are used as separators for "semantic words" in Alacritty.
#semantic_escape_chars: ",│`|:\"' ()[]{}<>\t"

# When set to `true`, selected text will be copied to the primary clipboard.
#save_to_clipboard: false

#cursor:
# Cursor style
#
# Values for `style`:
#   - ▇ Block
#   - _ Underline
#   - | Beam
#style: Block

# Vi mode cursor style
#
# If the vi mode cursor style is `None` or not specified, it will fall back to
# the style of the active value of the normal cursor.
#
# See `cursor.style` for available options.
#vi_mode_style: None

# If this is `true`, the cursor will be rendered as a hollow box when the
# window is not focused.
#unfocused_hollow: true

# Thickness of the cursor relative to the cell width as floating point number
# from `0.0` to `1.0`.
#thickness: 0.15

# Live config reload (changes require restart)
#live_config_reload: true

# Send ESC (\x1b) before characters when alt is pressed.
#alt_send_esc: true

# Mouse bindings
#
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# To trigger mouse bindings when an application running within Alacritty captures the mouse, the
# `Shift` modifier is automatically added as a requirement.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings)
#
# And optionally:
#
# - `mods` (see key bindings)
#mouse_bindings:
#  - { mouse: Middle, action: PasteSelection }

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - ToggleViMode
#   - SearchForward
#       Start searching toward the right of the search origin.
#   - SearchBackward
#       Start searching toward the left of the search origin.
#   - Copy
#   - Paste
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollHalfPageUp
#   - ScrollHalfPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#       Remove the terminal's scrollback history.
#   - Hide
#       Hide the Alacritty window.
#   - Minimize
#       Minimize the Alacritty window.
#   - Quit
#       Quit Alacritty.
#   - ToggleFullscreen
#   - SpawnNewInstance
#       Spawn a new instance of Alacritty.
#   - ClearLogNotice
#       Clear Alacritty's UI warning and error notice.
#   - ClearSelection
#       Remove the active selection.
#   - ReceiveChar
#   - None
#
#   (`mode: Vi` only):
#   - Open
#       Open URLs at the cursor location with the launcher configured in `url.launcher`.
#   - Up
#       Move the vi mode cursor up by one line.
#   - Down
#       Move the vi mode cursor down by one line.
#   - Left
#       Move the vi mode cursor left by one character.
#   - Right
#       Move the vi mode cursor right by one character.
#   - First
#       Move the vi mode cursor to the start of the line, searching across newlines if it is already at the beginning.
#   - Last
#       Move the vi mode cursor to the end of the line, searching across newlines if it is already at the end.
#   - FirstOccupied
#       Move the vi mode cursor to the first non-empty cell in this line, searching across newlines if it is already at the first one.
#   - High
#       Move the vi mode cursor to the top of the screen.
#   - Middle
#       Move the vi mode cursor to the middle of the screen.
#   - Low
#       Move the vi mode cursor to the bottom of the screen.
#   - SemanticLeft
#       Move the vi mode cursor to the start of the previous semantically separated word.
#   - SemanticRight
#       Move the vi mode cursor to the start of the next semantically separated word.
#   - SemanticLeftEnd
#       Move the vi mode cursor to the end of the previous semantically separated word.
#   - SemanticRightEnd
#       Move the vi mode cursor to the end of the next semantically separated word.
#   - WordLeft
#       Move the vi mode cursor to the start of the previous whitespace separated word.
#   - WordRight
#       Move the vi mode cursor to the start of the next whitespace separated word.
#   - WordLeftEnd
#       Move the vi mode cursor to the end of the previous whitespace separated word.
#   - WordRightEnd
#       Move the vi mode cursor to the end of the next whitespace separated word.
#   - Bracket
#       Move the vi mode cursor to the next character that matches the bracket at the cursor's
#       current location.
#   - ToggleNormalSelection
#   - ToggleLineSelection
#   - ToggleBlockSelection
#   - ToggleSemanticSelection
#       Toggle semantic selection based on `selection.semantic_escape_chars`.
#   - SearchNext
#       Jump to the beginning of the next match.
#   - SearchPrevious
#       Jump to the beginning of the previous match.
#   - SearchStart
#       Jump to the next start of a match to the left of the vi mode cursor.
#   - SearchEnd
#       Jump to the next end of a match to the left of the vi mode cursor.
#
#   (macOS only):
#   - ToggleSimpleFullscreen
#       Enter fullscreen without occupying another space.
#
#   (Linux/BSD only):
#   - CopySelection
#       Copy from the selection buffer.
#   - PasteSelection
#       Paste from the selection buffer.
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#    - Vi
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# in the order they were defined in.
key_bindings:
  #- { key: Paste,                                action: Paste          }
  #- { key: Copy,                                 action: Copy           }
  #- { key: L,         mods: Control,             action: ClearLogNotice }
  #- { key: L,         mods: Control, mode: ~Vi,  chars: "\x0c"          }
  #- { key: PageUp,    mods: Shift,   mode: ~Alt, action: ScrollPageUp,  }
  #- { key: PageDown,  mods: Shift,   mode: ~Alt, action: ScrollPageDown }
  #- { key: Home,      mods: Shift,   mode: ~Alt, action: ScrollToTop,   }
  #- { key: End,       mods: Shift,   mode: ~Alt, action: ScrollToBottom }

  # Vi Mode
  #- { key: Space,  mods: Shift|Control, mode: Vi, action: ScrollToBottom          }
  #- { key: Space,  mods: Shift|Control,           action: ToggleViMode            }
  #- { key: Escape,                      mode: Vi, action: ClearSelection          }
  #- { key: I,                           mode: Vi, action: ScrollToBottom          }
  #- { key: I,                           mode: Vi, action: ToggleViMode            }
  #- { key: C,      mods: Control,       mode: Vi, action: ToggleViMode            }
  #- { key: Y,      mods: Control,       mode: Vi, action: ScrollLineUp            }
  #- { key: E,      mods: Control,       mode: Vi, action: ScrollLineDown          }
  #- { key: G,                           mode: Vi, action: ScrollToTop             }
  #- { key: G,      mods: Shift,         mode: Vi, action: ScrollToBottom          }
  #- { key: B,      mods: Control,       mode: Vi, action: ScrollPageUp            }
  #- { key: F,      mods: Control,       mode: Vi, action: ScrollPageDown          }
  #- { key: U,      mods: Control,       mode: Vi, action: ScrollHalfPageUp        }
  #- { key: D,      mods: Control,       mode: Vi, action: ScrollHalfPageDown      }
  #- { key: Y,                           mode: Vi, action: Copy                    }
  #- { key: Y,                           mode: Vi, action: ClearSelection          }
  #- { key: Copy,                        mode: Vi, action: ClearSelection          }
  #- { key: V,                           mode: Vi, action: ToggleNormalSelection   }
  #- { key: V,      mods: Shift,         mode: Vi, action: ToggleLineSelection     }
  #- { key: V,      mods: Control,       mode: Vi, action: ToggleBlockSelection    }
  #- { key: V,      mods: Alt,           mode: Vi, action: ToggleSemanticSelection }
  #- { key: Return,                      mode: Vi, action: Open                    }
  #- { key: K,                           mode: Vi, action: Up                      }
  #- { key: J,                           mode: Vi, action: Down                    }
  #- { key: H,                           mode: Vi, action: Left                    }
  #- { key: L,                           mode: Vi, action: Right                   }
  #- { key: Up,                          mode: Vi, action: Up                      }
  #- { key: Down,                        mode: Vi, action: Down                    }
  #- { key: Left,                        mode: Vi, action: Left                    }
  #- { key: Right,                       mode: Vi, action: Right                   }
  #- { key: Key0,                        mode: Vi, action: First                   }
  #- { key: Key4,   mods: Shift,         mode: Vi, action: Last                    }
  #- { key: Key6,   mods: Shift,         mode: Vi, action: FirstOccupied           }
  #- { key: H,      mods: Shift,         mode: Vi, action: High                    }
  #- { key: M,      mods: Shift,         mode: Vi, action: Middle                  }
  #- { key: L,      mods: Shift,         mode: Vi, action: Low                     }
  #- { key: B,                           mode: Vi, action: SemanticLeft            }
  #- { key: W,                           mode: Vi, action: SemanticRight           }
  #- { key: E,                           mode: Vi, action: SemanticRightEnd        }
  #- { key: B,      mods: Shift,         mode: Vi, action: WordLeft                }
  #- { key: W,      mods: Shift,         mode: Vi, action: WordRight               }
  #- { key: E,      mods: Shift,         mode: Vi, action: WordRightEnd            }
  #- { key: Key5,   mods: Shift,         mode: Vi, action: Bracket                 }
  #- { key: Slash,                       mode: Vi, action: SearchForward           }
  #- { key: Slash,  mods: Shift,         mode: Vi, action: SearchBackward          }
  #- { key: N,                           mode: Vi, action: SearchNext              }
  #- { key: N,      mods: Shift,         mode: Vi, action: SearchPrevious          }

  # (Windows, Linux, and BSD only)
  #- { key: V,              mods: Control|Shift,           action: Paste            }
  #- { key: C,              mods: Control|Shift,           action: Copy             }
  #- { key: F,              mods: Control|Shift,           action: SearchForward    }
  #- { key: B,              mods: Control|Shift,           action: SearchBackward   }
  #- { key: C,              mods: Control|Shift, mode: Vi, action: ClearSelection   }
  #- { key: Insert,         mods: Shift,                   action: PasteSelection   }
  #- { key: Key0,           mods: Control,                 action: ResetFontSize    }
  #- { key: Equals,         mods: Control,                 action: IncreaseFontSize }
  #- { key: Plus,           mods: Control,                 action: IncreaseFontSize }
  #- { key: NumpadAdd,      mods: Control,                 action: IncreaseFontSize }
  #- { key: Minus,          mods: Control,                 action: DecreaseFontSize }
  #- { key: NumpadSubtract, mods: Control,                 action: DecreaseFontSize }

  # (Windows only)
  #- { key: Return,   mods: Alt,           action: ToggleFullscreen }

  # (macOS only)
  #- { key: K,              mods: Command, mode: ~Vi, chars: "\x0c"            }
  #- { key: Key0,           mods: Command,            action: ResetFontSize    }
  #- { key: Equals,         mods: Command,            action: IncreaseFontSize }
  #- { key: Plus,           mods: Command,            action: IncreaseFontSize }
  #- { key: NumpadAdd,      mods: Command,            action: IncreaseFontSize }
  #- { key: Minus,          mods: Command,            action: DecreaseFontSize }
  #- { key: NumpadSubtract, mods: Command,            action: DecreaseFontSize }
  #- { key: K,              mods: Command,            action: ClearHistory     }
  #- { key: V,              mods: Command,            action: Paste            }
  #- { key: C,              mods: Command,            action: Copy             }
  #- { key: C,              mods: Command, mode: Vi,  action: ClearSelection   }
  #- { key: H,              mods: Command,            action: Hide             }
  #- { key: M,              mods: Command,            action: Minimize         }
  #- { key: Q,              mods: Command,            action: Quit             }
  #- { key: W,              mods: Command,            action: Quit             }
  #- { key: N,              mods: Command,            action: SpawnNewInstance }
  #- { key: F,              mods: Command|Control,    action: ToggleFullscreen }
  #- { key: F,              mods: Command,            action: SearchForward    }
  #- { key: B,              mods: Command,            action: SearchBackward   }
  - { key: Return, mods: Command, action: ToggleFullscreen }
